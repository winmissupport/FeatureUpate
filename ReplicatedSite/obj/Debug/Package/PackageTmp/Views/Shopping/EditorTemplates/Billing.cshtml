@model CheckoutViewModel
@{
    var contextID = Guid.NewGuid().ToString();
    IPaymentMethod PaymentMethod;

    var selectedPaymentType = (Model.PropertyBag.PaymentMethod != null) ? Model.PropertyBag.PaymentMethod.GetType().ToString() : "none";
    var allowIdealPaymentMethod = Model.PropertyBag.ShippingAddress.Country == "NL";

    var idealPaymentTypeID = 999;
}

<div id="view-billing-@contextID">
    <div class="row margin-5">
        <div class="col-xs-12">
            <div class="form-group">
                <label for="PaymentMethodPreference" class="control-label">@Resources.Common.HowPay</label>

                @{
                    var availablePaymentTypes = new List<Common.Api.ExigoWebService.PaymentType>()
                    {
                        Common.Api.ExigoWebService.PaymentType.CreditCard
                    };
                }

                @if (allowIdealPaymentMethod)
                {
                    <div class="radio">
                        <label for="@(Html.IdFor(c => c.PaymentTypeID))_@idealPaymentTypeID">
                            @Html.RadioButtonFor(c => c.PaymentTypeID, idealPaymentTypeID, new
                            {
                                id = Html.IdFor(c => c.PaymentTypeID) + "_" + idealPaymentTypeID
                            })
                            Ideal
                        </label>
                    </div>
                }

                @foreach (var paymentType in availablePaymentTypes)
                {
                    var paymentTypeID = Exigo.GetPaymentTypeID(paymentType);
                    var paymentTypeDescription = (paymentType == Common.Api.ExigoWebService.PaymentType.CreditCard) ? "Credit Card" : paymentType.ToString();

                    <div class="radio">
                        <label for="@(Html.IdFor(c => c.PaymentTypeID))_@paymentTypeID">
                            @Html.RadioButtonFor(c => c.PaymentTypeID, paymentTypeID, new
                            {
                                id = Html.IdFor(c => c.PaymentTypeID) + "_" + paymentTypeID
                            })
                            @paymentTypeDescription
                        </label>
                    </div>
                }

            </div>
        </div>
    </div>

    <hr />

    <div data-bind="@Html.NameFor(c => c.PaymentTypeID)" data-key="@Exigo.GetPaymentTypeID(Common.Api.ExigoWebService.PaymentType.CreditCard)" class="hidden">

        <div id="view-editpaymentmethod">
            @if (Model.PaymentMethods.Count() > 0)
            {
                <h3>@Resources.Common.SelectPaymentMethod</h3>

                <div class="panel panel-default">
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead style="background-color: #eee;">
                                <tr>
                                    <th colspan="2">@Resources.Common.YourPaymentMethods</th>
                                    <th>@Resources.Common.Name</th>
                                    <th class="text-right" style="width: 100px;">@Resources.Common.Expires</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var method in Model.PaymentMethods)
                                {
                                    if (method is CreditCard)
                                    {
                                        var card = method as CreditCard;

                                    <tr>
                                        <td style="width: 180px;">
                                            @using (Html.BeginForm("UseCreditCardOnFile", "shopping"))
                                            {
                                                @Html.EditorFor(c => card, "CreditCardOnFile")
                                                @Html.AntiForgeryToken()

                                                <button type="submit" class="btn btn-primary btn-block">@Resources.Common.PayWithThisCard</button>
                                            }
                                        </td>

                                        <td>@Resources.Common.CardEndingIn @card.CardNumber</td>
                                        <td>@card.NameOnCard</td>
                                        <td class="@((card.IsExpired) ? "text-danger" : "") text-right">
                                            @card.ExpirationDate.ToString("M/yyyy")
                                            @if (card.IsExpired)
                                            {
                                                <text><br />@Resources.Common.Expired</text>
                                            }
                                        </td>
                                    </tr>
                                    }

                                }
                            </tbody>
                        </table>
                    </div>
                </div>
                    
                <div class="space-50"></div>
            }

            <h3>@Resources.Common.UsingNewPaymentMethod</h3>

        </div>
    </div>

    <div data-bind="@Html.NameFor(c => c.PaymentTypeID)" data-key="@idealPaymentTypeID" class="hidden">
        @{
            var idealPaymentType = new Ideal();            
        }
        <input type="hidden" name="Attempts" value="@idealPaymentType.Attempts" />
    </div>

</div>



@using (Html.BeginPartialScript())
{
    <script>
        require(["extensions"], function () {

            // Settings
            var context = "#view-billing-@contextID",
                    $context = $(context);


            // Event Handlers
            function registerEventHandlers() {

                // Handle the PayableType fields
                var paymentTypeIDName = '@Html.NameFor(c => c.PaymentTypeID)';


                // Auto-check the first option if applicable
                        if ($('[name="{0}"]:checked'.format(paymentTypeIDName), $context).length == 0) {
                            $('[name="{0}"]:first'.format(paymentTypeIDName), $context).prop('checked', true);
                        }

                // Toggle the respective fieldset on change
                        $('[name="{0}"]'.format(paymentTypeIDName), $context).on('change', function () {
                            var name = $(this).attr('name'),
                                value = $('[name="{0}"]:checked'.format(name), $context).val();

                            $('[data-bind="{0}"]'.format(name), $context).addClass('hidden')
                                .filter('[data-key="{0}"]'.format(value), $context).removeClass('hidden');
                        }).filter(':checked').triggerHandler('change');
                    }


            // Actions
            var actions = {

            };


            // Helpers
            var helpers = {

            };


            // Initialization
            function init() {
                registerEventHandlers();
            }
            init();

        });
    </script>
}