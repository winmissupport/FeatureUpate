@model EnrollmentPropertyBag
@{
    var contextID = Guid.NewGuid().ToString();
    IPaymentMethod PaymentMethod;
}



<div id="view-billing-@contextID">
    <div class="row margin-5">
        <div class="col-xs-12">
            <div class="form-group">
                <label for="PaymentMethodPreference" class="control-label">How would you like to pay for your order(s)?</label>

                @{
                    var availablePaymentTypes = new List<Common.Api.ExigoWebService.PaymentType>()
                    {
                        Common.Api.ExigoWebService.PaymentType.CreditCard,
                        Common.Api.ExigoWebService.PaymentType.ACHDebit
                    };
                }

                @foreach (var paymentType in availablePaymentTypes)
                {
                    var paymentTypeID = Exigo.GetPaymentTypeID(paymentType);

                    <div class="radio">
                        <label for="@(Html.IdFor(c => c.PaymentTypeID))_@paymentTypeID">
                            @Html.RadioButtonFor(c => c.PaymentTypeID, paymentTypeID, new
                            {
                                id = Html.IdFor(c => c.PaymentTypeID) + "_" + paymentTypeID
                            })
                            @paymentType.ToString()
                        </label>
                    </div>
                }

            </div>
        </div>
    </div>

    <hr />



    <div data-bind="@Html.NameFor(c => c.PaymentTypeID)" data-key="@Exigo.GetPaymentTypeID(Common.Api.ExigoWebService.PaymentType.CreditCard)" class="hidden">

        @{
            if (Model.PaymentMethod is CreditCard) { PaymentMethod = (CreditCard)Model.PaymentMethod; }
            else { PaymentMethod = new CreditCard(); }
        }
        @Html.EditorFor(c => PaymentMethod, "CreditCard")

    </div>


    <div data-bind="@Html.NameFor(c => c.PaymentTypeID)" data-key="@Exigo.GetPaymentTypeID(Common.Api.ExigoWebService.PaymentType.ACHDebit)" class="hidden">

        @{
            if (Model.PaymentMethod is BankAccount) { PaymentMethod = (BankAccount)Model.PaymentMethod; }
            else { PaymentMethod = new BankAccount(); }
        }
        @Html.EditorFor(c => PaymentMethod, "BankAccount")

    </div>

</div>



@using (Html.BeginPartialScript())
{

    <script>
        require(["extensions"], function () {

            // Settings
            var context = "#view-billing-@contextID",
                    $context = $(context);


            // Event Handlers
            function registerEventHandlers() {

                // Handle the PayableType fields
                var paymentTypeIDName = '@Html.NameFor(c => c.PaymentTypeID)';

                // Auto-check the first option if applicable
                if ($('[name="{0}"]:checked'.format(paymentTypeIDName), $context).length == 0) {
                    $('[name="{0}"]:first'.format(paymentTypeIDName), $context).prop('checked', true);
                }

                // Toggle the respective fieldset on change
                $('[name="{0}"]'.format(paymentTypeIDName), $context).on('change', function () {
                    var name = $(this).attr('name'),
                        value = $('[name="{0}"]:checked'.format(name), $context).val();



                    $('[data-bind="{0}"]'.format(name), $context).addClass('hidden')
                        .filter('[data-key="{0}"]'.format(value), $context).removeClass('hidden');
                }).filter(':checked').triggerHandler('change');
            }


            // Actions
            var actions = {

            };


            // Helpers
            var helpers = {

            };


            // Initialization
            function init() {
                registerEventHandlers();
            }
            init();

        });
    </script>
}